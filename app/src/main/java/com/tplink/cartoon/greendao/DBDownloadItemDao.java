package com.tplink.cartoon.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tplink.cartoon.data.bean.DBDownloadItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBDOWNLOAD_ITEM".
*/
public class DBDownloadItemDao extends AbstractDao<DBDownloadItem, Long> {

    public static final String TABLENAME = "DBDOWNLOAD_ITEM";

    /**
     * Properties of entity DBDownloadItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Comic_id = new Property(1, Long.class, "comic_id", false, "COMIC_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Chapters_title = new Property(3, String.class, "chapters_title", false, "CHAPTERS_TITLE");
        public final static Property Chapters = new Property(4, int.class, "chapters", false, "CHAPTERS");
        public final static Property Num = new Property(5, int.class, "num", false, "NUM");
        public final static Property Current_num = new Property(6, int.class, "current_num", false, "CURRENT_NUM");
        public final static Property Create_time = new Property(7, Long.class, "create_time", false, "CREATE_TIME");
        public final static Property Update_time = new Property(8, Long.class, "update_time", false, "UPDATE_TIME");
    }


    public DBDownloadItemDao(DaoConfig config) {
        super(config);
    }
    
    public DBDownloadItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBDOWNLOAD_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"COMIC_ID\" INTEGER," + // 1: comic_id
                "\"TITLE\" TEXT," + // 2: title
                "\"CHAPTERS_TITLE\" TEXT," + // 3: chapters_title
                "\"CHAPTERS\" INTEGER NOT NULL ," + // 4: chapters
                "\"NUM\" INTEGER NOT NULL ," + // 5: num
                "\"CURRENT_NUM\" INTEGER NOT NULL ," + // 6: current_num
                "\"CREATE_TIME\" INTEGER," + // 7: create_time
                "\"UPDATE_TIME\" INTEGER);"); // 8: update_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBDOWNLOAD_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBDownloadItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long comic_id = entity.getComic_id();
        if (comic_id != null) {
            stmt.bindLong(2, comic_id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String chapters_title = entity.getChapters_title();
        if (chapters_title != null) {
            stmt.bindString(4, chapters_title);
        }
        stmt.bindLong(5, entity.getChapters());
        stmt.bindLong(6, entity.getNum());
        stmt.bindLong(7, entity.getCurrent_num());
 
        Long create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindLong(8, create_time);
        }
 
        Long update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindLong(9, update_time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBDownloadItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long comic_id = entity.getComic_id();
        if (comic_id != null) {
            stmt.bindLong(2, comic_id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String chapters_title = entity.getChapters_title();
        if (chapters_title != null) {
            stmt.bindString(4, chapters_title);
        }
        stmt.bindLong(5, entity.getChapters());
        stmt.bindLong(6, entity.getNum());
        stmt.bindLong(7, entity.getCurrent_num());
 
        Long create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindLong(8, create_time);
        }
 
        Long update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindLong(9, update_time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBDownloadItem readEntity(Cursor cursor, int offset) {
        DBDownloadItem entity = new DBDownloadItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // comic_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // chapters_title
            cursor.getInt(offset + 4), // chapters
            cursor.getInt(offset + 5), // num
            cursor.getInt(offset + 6), // current_num
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // create_time
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // update_time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBDownloadItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setComic_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setChapters_title(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setChapters(cursor.getInt(offset + 4));
        entity.setNum(cursor.getInt(offset + 5));
        entity.setCurrent_num(cursor.getInt(offset + 6));
        entity.setCreate_time(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setUpdate_time(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBDownloadItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBDownloadItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBDownloadItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
